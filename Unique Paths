#include <bits/stdc++.h>
//  Brute Force Approach
// int countPaths(int i, int j, int m, int n)
// {
//     if(i==(m-1) && j==(n-1))
//     {
//         return 1;
//     }
    
//     if(i>=m || j>=n)
//     {
//         return 0;
//     }
//     else
//     {
//         return (countPaths(i+1, j, m, n) + countPaths(i, j+1, m, n));
//     }
// }

// int uniquePaths(int m, int n) {
// 	// Write your code here.
//     int ans;
//     ans=countPaths(0,0,m,n);
//     return ans;    
// } 


//Optimal Soln using DP
int countPaths(int i, int j, int m, int n, vector<vector<int>> &dp)
{
    if(i==(m-1) && j==(n-1))
    {
        return 1;
    }
    
    if(i>=m || j>=n)
    {
        return 0;
    }
   
    if(dp[i][j] != -1) return dp[i][j];
    else return dp[i][j]=(countPaths(i+1, j, m, n, dp) + countPaths(i, j+1, m, n, dp));
    
}

int uniquePaths(int m, int n) {
    // Write your code here.
    vector<vector<int>> dp(m, vector<int>(n,-1));
    //Putting -1 in all indexes of vector    
    int ans;
    ans=countPaths(0,0,m,n,dp);
    return ans;
    
} 
